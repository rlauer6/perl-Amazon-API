package Amazon::API;

# Generic interface to Amazon APIs

use strict;
use warnings;

use parent qw/Class::Accessor/;

use Amazon::API::Error;
use AWS::Signature4;
use Data::Dumper;
use HTTP::Request;
use JSON qw/to_json/;
use LWP::UserAgent;
use Scalar::Util qw/reftype/;
use XML::Simple;

__PACKAGE__->follow_best_practice;
__PACKAGE__->mk_accessors(qw/action api credentials region signer target url user_agent version debug last_action/);


=pod

=head1 NAME

C<Amazon::API>

=head1 SYNOPSIS

 use parent qw/Amazon::API/;

=head1 DESCRIPTION

Parent class to use for constructing AWS API interfaces.  See
C<Amazon::EC2> for an example.

=head1 METHODS

=cut


=pod

=head2 new

 new( options )

=over 5

=item credentials

C<Amazon::Credentials> object or at least an object that
C<->can(get_aws_access_key_id)> and
C<->can(get_aws_secret_access_key)> and C<->can(get_token)>

=item user_agent

Your own user agent object or by default C<LWP::UserAgent>.

=item api

=item url

=item debug

0/1 - will dump request/response if you set to true.

=item action

=back


=cut

sub new {
  my $class = shift;
  my $self = $class->SUPER::new(@_);

  unless ($self->get_user_agent) {
    $self->set_user_agent(new LWP::UserAgent);
  }

  $self->set_signer(AWS::Signature4->new(-access_key => $self->get_credentials->get_aws_access_key_id,
					 -secret_key => $self->get_credentials->get_aws_secret_access_key)
		   );
  
  $self;
}

=pod

=head2 invoke_api

 invoke_api(action, [parameters, [content-type]]);

=over 5

=item action

=item parameters

Parameters to send to the API. Can be a scalar, a hash reference or an
array reference.

=item content-type

If you send the C<content-type>, it is assumed that the parameters are
the payload to be sent in the request.  Otherwise, the C<parameters>
will be converted to a JSON string if the C<parameters> value is a
hash reference or a query string if the C<parameters> value is an
array reference.

Hence, to send a query string, you should send an array key/value
pairs, or an array of scalars of the form Name=Value.

 [ { Action => 'DescribeInstances' } ]
 [ "Action=DescribeInstances" ]

...are both equivalent ways to force the method to send a query string.

=back

=cut

sub invoke_api {
  my $self = shift;
  my ($action, $parameters, $content_type) = @_;

  $self->set_action($action);
  $self->set_last_action($action);

  my $content;
  
  unless ( $content_type ) {
    if ( ref($parameters) && reftype($parameters) eq 'HASH' ) {
      $content_type = 'application/x-amz-json-1.1';
      $content = to_json($parameters | {});
    }
    elsif ( ref($parameters) && reftype($parameters) eq 'ARRAY') {
      $content_type = 'application/x-www-form-url-encoded';
      my @query_string;
      foreach (@{$parameters}) {
	push @query_string, ref($_) ? sprintf("%s=%s", %$_) : $_;
      }
      $content = join('&', @query_string);
    }
    else {
      $content_type = 'application/x-www-form-url-encoded';
      $content = $parameters;
    }
  }
  else {
    $content = $parameters;
  }
   
  my $rsp = $self->submit(content => $content, content_type => $content_type);
  
  if ( $self->get_debug ) {
    print STDERR Dumper [$rsp];
  }
    
  # probably want to decode content when there is an error, but this
  # will do for now
  unless ($rsp->is_success) {
    die new Amazon::API::Error({error       => $rsp->code,
				message_raw => $rsp->content,
				api         => $self
			       });
    
  }
    
  return $rsp->content;
}

=pod

=head2 submit

 submit( options )

C<options> is hash of options:

=over 5

=item content

Payload to send.

=item content_type

Content types we have seen used to send values to AWS APIs:

 application/json
 application/x-amz-json-1.0
 application/x-amz-json-1.1
 application/x-www-form-urlencoded
 application/json
 application/x-amz-json-1.0
 application/x-amz-json-1.1
 application/x-www-form-urlencoded

=back

=cut

sub submit {
  my $self = shift;
  my %options = @_;

  my $request = HTTP::Request->new('POST', $self->get_url);

  # NOTE:
  #
  # Some APIs want the version in the target, some don't. Sparse
  # documentation on X-Amz-Target. DDB & KMS seems to be able to use
  # this in lieu of query variables Action & Version, although there
  # is a lot of inconsisitency in the APIs.  DDB uses
  # DynamoDB_YYYYMMDD.Action while KMS will not take the version
  # that way and prefers TrentService.Action (with no version).
  # There is no explanation in any of the documentations as to what
  # "TrentService" might actually mean.
  #
  # In general, the AWS API ecosystem is junk. Each service seems to
  # have its own rules and protocol regarding what the content of the
  # headers should be.  This generic API interface tries to make it
  # possible to use a central class (Amazon::API) as a sort of gateway
  # to the APIs. The most generic interface is simply sending query
  # variables and not much else in the header.  APIs like EC2 conform
  # to the that school, so we use 'Action' to determine whether to
  # send the API action in the header or to assume that it is being
  # sent as one of the query variables.  Other APIs like, DynamoDB
  # like to see the Action in the header (X-Amz-Target).
  
  if ( $self->get_action ) {
    if ( $self->get_version) {
      $self->set_target(sprintf("%s_%s.%s", $self->get_api, $self->get_version, $self->get_action));
    }
    else {
      $self->set_target(sprintf("%s.%s", $self->get_api, $self->get_action));
    }

    $request->header('X-Amz-Target', $self->get_target());
  }

  # Content types we have seen used to send values to AWS APIs
  #
  #   application/json
  #   application/x-amz-json-1.0
  #   application/x-amz-json-1.1
  #   application/x-www-form-urlencoded
  
  $options{content_type} = $options{content_type} || 'application/x-amz-json-1.1';
  $request->content_type($options{content_type});

  $request->content($options{content});
  
  $request->header('X-Amz-Security-Token', $self->get_credentials->get_token)
    if $self->get_credentials->get_token;
		 
  # sign the request
  $self->get_signer->sign($request);

  # make the request, return response object
  if ( $self->get_debug ) {
    print STDERR Dumper([$request]);
  }

  $self->get_user_agent->request($request);
}


=pod

=head1 SEE OTHER

C<Amazon::Credentials>, C<Amazon::API::Error>

=head1 AUTHOR

Rob Lauer - <rlauer6@comcast.net>

=cut

1;
